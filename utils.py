"""–§–∞–π–ª —Å –æ–±—â–∏–º–∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.
"""

from urllib.request import urlretrieve
from zipfile import ZipFile

from itertools import product
from typing import Tuple
from typing import Iterable

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


### Data Loading

def get_all_data() -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.
    –í–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –∑–∞–≥—Ä—É–∑–∫—É –∞—Ä—Ö–∏–≤–æ–≤, —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É, —á—Ç–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]: [train_sales, test_sales, promo]
    """

    url = 'https://drive.google.com/uc?export=download&id=1ndm03Vd4-gW2Q2iKkCjFkGnMf5X98RGy&confirm=t'
    file_name = 'all_data.zip'

    print('‚¨áÔ∏è Loading data...')
    load(url, file_name)

    print('üîÑ Unzipping data...')
    unzip(file_name)

    print('üßπ Cleaning up...')
    remove(file_name)

    print('üìú Creating DataFrames & filling zeros...')
    all_data = read_all_data()

    print('‚úÖ Completed.')
    return all_data


def load(url: str, file_name: str):
    """–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.

    Args:
        url (str): URL —Ñ–∞–π–ª–∞.
        file_name (str): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    """

    urlretrieve(url, file_name)


def unzip(zip_path: str, target_dir: str = ''):
    """–†–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å zip –∞—Ä—Ö–∏–≤.

    Args:
        zip_path (str): –ü—É—Ç—å –¥–æ –∞—Ä—Ö–∏–≤–∞.
        target_dir (str, optional): –ü—É—Ç—å, –∫—É–¥–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å —Ñ–∞–π–ª.
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é '' (–≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏).
    """

    with ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(target_dir)


def remove(path: str):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏.

    Args:
        path (str): –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏.
    """

    try:
        os.remove(path)
    except OSError:
        pass


def read_all_data(path: str = '') -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:
    """–°–æ–∑–¥–∞—Ç—å –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ã –¥–ª—è —Ç—Ä–µ–π–Ω, —Ç–µ—Å—Ç –∏ –ø—Ä–æ–º–æ –¥–∞–Ω–Ω—ã—Ö
    –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–µ–π–Ω –∏ —Ç–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –Ω—É–ª—è–º–∏.

    Args:
        path (str, optional): –ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ —Å —Ñ–∞–π–ª–∞–º–∏.
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é '' (—Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è).

    Returns:
        Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]: [train_sales, test_sales, promo]
    """

    return (
        fill_data(pd.read_excel(f'{path}train_sales.xlsx')),
        fill_data(pd.read_excel(f'{path}test_sales.xlsx')),
        pd.read_excel(f'{path}train_promo.xlsx')
    )


def fill_data(data: pd.DataFrame) -> pd.DataFrame:
    """–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –Ω—É–ª—è–º–∏.

    Args:
        data (pd.DataFrame): –ò—Å—Ö–æ–¥–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º.

    Returns:
        pd.DataFrame: –ù–æ–≤—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º, –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –Ω—É–ª—è–º–∏.
    """

    dfus = data['DFU'].unique()
    customers = data['Customer'].unique()
    dtr = pd.date_range(
        data['Period'].min(),
        data['Period'].max(),
        freq='W-MON'
    )
    index_cols = ['Period', 'DFU', 'Customer']

    zeros_df = pd.DataFrame(
        product(dfus, customers, dtr.values, [0], [0]),
        columns=data.columns
    ).set_index(index_cols)
    new_data = data.copy().set_index(index_cols)

    index_diff = zeros_df.index.difference(
        new_data.index
    )

    return new_data.append(zeros_df.loc[index_diff])\
        .sort_values(by="Period")\
        .reset_index()


### Data Manipulation

def group_data(data: pd.DataFrame, date_interval: str) -> pd.DataFrame:
    """–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–µ–¥–µ–ª—è–º/–º–µ—Å—è—Ü–∞–º –∏ —Ç.–¥.

    Args:
        data (pd.DataFrame): –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏, –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã
            'DFU', 'Customer', 'Period', 'BPV' –∏ 'Total Sell-in'.
        date_interval (str): –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≥—Ä–µ–≥–∞—Ü–∏–∏.
            –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–º. –≤ —Ä–∞–∑–¥–µ–ª–µ 'Offset aliases' –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ pandas.

    Returns:
        pd.DataFrame: –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ BPV –∏ Total Sell-in,
            –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É.
    """

    return data.groupby(
        ['DFU', 'Customer', data['Period'].dt.to_period(date_interval)]
    ).agg(
        {'BPV': sum, 'Total Sell-in': sum}
    ).reset_index()


def clean_data(data: pd.DataFrame, replace_with: str = '3sigma') -> pd.DataFrame:
    """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã –≤ –¥–∞–Ω–Ω—ã—Ö.

    Args:
        data (pd.DataFrame): –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
        replace_with (str, optional): 'mean' –∏–ª–∏ '3sigma'. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é '3sigma'.

    Returns:
        pd.DataFrame: –ö–æ–ø–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—ã–±—Ä–æ—Å–æ–≤.
    """

    sigma = data['BPV'].std()
    mean = data['BPV'].mean()

    data_cleaned = data.copy()
    replacement = mean if replace_with == 'mean' else 3 * sigma
    data_cleaned.loc[data_cleaned['BPV'] > 3 * sigma, 'BPV'] = replacement
    return data_cleaned


def make_date_features(X: pd.DataFrame, date_col_name='Period') -> pd.DataFrame:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥, –∫–≤–∞—Ä—Ç–∞–ª).

    Args:
        X (pd.DataFrame): –ò—Å—Ö–æ–¥–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º.
        date_col_name (str, optional): –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å –¥–∞—Ç–æ–π –≤ X. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'Period'.

    Returns:
        pd.DataFrame: –ö–æ–ø–∏—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏.
    """

    X_new = X.copy()
    date_info = X[date_col_name].dt
    X_new['year'] = date_info.year
    X_new['month'] = date_info.month
    X_new['day'] = date_info.day
    X_new['week'] = date_info.week
    X_new['Q'] = date_info.quarter

    return X_new


### Metrics

def wape_metric(actual: Iterable[float], predicted: Iterable[float]) -> float:
    """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É WAPE.

    Args:
        actual (Iterable[float]): –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.
        predicted (Iterable[float]): –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.

    Returns:
        float: –ü–æ–¥—Å—á–∏—Ç–∞–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ WAPE.
    """

    return np.abs(np.array(actual) - np.array(predicted)).sum() / np.array(actual).sum()


def quality(actual: np.array, predicted: np.array) -> float:
    """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É (1 - WAPE).

    Args:
        actual (np.array): –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.
        predicted (np.array): –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.

    Returns:
        float: –ü–æ–¥—Å—á–∏—Ç–∞–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ (1 - WAPE).
    """

    return 1 - wape_metric(actual, predicted)


def save_results(actual: np.array, predicted: np.array, comment=None):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –º–æ–¥–µ–ª–∏ –∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ .csv.

    Args:
        actual (np.array): –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.
        predicted (np.array): –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
        comment ([type], optional): –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è).
    """

    prefix = '' if comment is None else f'{comment}-'
    filename = f'{prefix}results.csv'

    pd.DataFrame({
        'actual': actual,
        'predicted': predicted
    }).to_csv(filename, index=False)


def plot_forecast(
    series_train: pd.Series,
    series_test: pd.Series,
    forecast: pd.Series,
    forecast_int=None
):
    """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏.

    Args:
        series_train (pd.Series): –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ BPV.
        series_test (pd.Series): –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ BPV.
        forecast (pd.Series): –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ BPV.
        forecast_int ([type], optional): –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
    """

    wape = wape_metric(series_test, forecast)
    qual = 1 - wape

    plt.figure(figsize=(12, 6))
    plt.title(f"WAPE: {wape:.2f}  Quality: {qual:.2f}")

    series_train.plot(label="train", color="b")
    series_test.plot(label="test", color="g")
    forecast.plot(label="forecast", color="r")

    if forecast_int is not None:
        plt.fill_between(
            series_test.index,
            forecast_int["lower"],
            forecast_int["upper"],
            alpha=0.2,
            color="dimgray",
        )

    plt.legend(prop={"size": 16})
    plt.show()


### Repository

class Repo:
    """–ö–ª–∞—Å—Å-–æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ DataFrame –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    init args:
        df (pd.DataFrame): –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            'Period', 'DFU' –∏ 'Customer'.
    """

    def __init__(self, df: pd.DataFrame):
        self.df = df
        if 'Unnamed: 0' in self.df.columns:
            self.df.drop(columns=['Unnamed: 0'], inplace=True)

    def get_data(
        self,
        cust: int = None,
        dfu: str = None,
        date_from: str = None,
        date_to: str = None,
        date_interval: str = None
    ) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
        –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–∞–≤–µ–Ω None, —Ç–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–µ–º—É –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.

        Args:
            cust (int, optional): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
            dfu (str, optional): DFU - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
            date_from (str, optional): –° –∫–∞–∫–æ–π –¥–∞—Ç—ã –≤—ã–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
            date_to (str, optional): –ü–æ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
            date_interval (str, optional): –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
                –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–º. –≤ –º–µ—Ç–æ–¥–µ group_data.

        Returns:
            pd.DataFrame: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
        """

        data = self.df

        if cust is not None:
            data = data[data['Customer'] == cust]

        if dfu is not None:
            data = data[data['DFU'] == dfu]

        if 'Period' in data.columns:
            if date_from is not None:
                data = data[data['Period'] >= date_from]

            if date_to is not None:
                data = data[data['Period'] <= date_to]

            data['Period'] = pd.to_datetime(data['Period'])

            if date_interval is not None:
                data = group_data(data, date_interval)

        return data

    def show_data_for(self, cust: int, dfu: str, save_plot: bool = False):
        """–í—ã–±—Ä–∞—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—É [DFU x Customer] –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è –Ω–∏—Ö –≥—Ä–∞—Ñ–∏–∫.

        Args:
            cust (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞.
            dfu (str): DFU - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.
            save_plot (bool, optional): –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–ª–∏ –Ω–µ—Ç.
                –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é False (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å).
        """

        data = self.get_data(cust, dfu)
        data_cleaned = clean_data(data)
        max_bpv = data['BPV'].max() + 10

        _, axs = plt.subplots(2, 1, figsize=(21, 16))
        top, bottom = axs[0], axs[1]

        top.plot(
            data["Period"].values.astype(np.datetime64),
            data['BPV']
        )
        bottom.plot(
            data_cleaned["Period"].values.astype(np.datetime64),
            data_cleaned['BPV'],
            color='green'
        )

        top.set_title(f'–ü—Ä–æ–¥–∞–∂–∏ –ö–ª–∏–µ–Ω—Ç—É {cust} - {dfu}')
        bottom.set_title(f'–ü—Ä–æ–¥–∞–∂–∏ –ö–ª–∏–µ–Ω—Ç—É {cust} - {dfu} (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—ã–±—Ä–æ—Å–æ–≤)')
        top.set_ylim(0, max_bpv)
        bottom.set_ylim(0, max_bpv)

        if save_plot:
            # does not work if folder not exists
            plt.savefig(f'pictures/generated/cust{cust}_{dfu}_processed.pdf')

        plt.show()
